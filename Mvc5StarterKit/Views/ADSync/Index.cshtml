@model Mvc5StarterKit.Models.DomainAccount
@{
    ViewBag.Title = "Active Directory Synchornization";

    var isNotLDAPAuthenticated = 
        string.IsNullOrWhiteSpace(ViewBag.AuthenticatedFailMessage);
}

<h2>@ViewBag.Title</h2>
@if (isNotLDAPAuthenticated)
{
    <h4 class="text-danger">@ViewBag.AuthenticatedFailMessage</h4>
}
@if (ViewBag.IzendaTenantWasGenerated)
{
    <div>
        <dl class="dl-horizontal">
            <dt>
                <label>Authenticated User:</label>
            </dt>
            <dd>
                <p>@($"{Model.DomainName}\\{Model.Username}")</p>
            </dd>
        </dl>
    </div>
    <h4>Query and Sync:</h4>
    <p style="margin-left: 30px">
        @Html.ActionLink("Sync AD Groups", "ADGroups")
        <br/>
        @Html.ActionLink("Sync AD Users", "ADUsers")
    </p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <section id="adsync">
                @using (Html.BeginForm("Index", "ADSync", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "query-form" }))
                {
                    @Html.AntiForgeryToken()
                    <h4>Use the configured domain account in Web.config file to sync roles and users.</h4>
                            <h5>Config keys: LDAPName, LDAPPort, LDAPUserName and LDAPPassword</h5>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="form-group">
                                @Html.LabelFor(m => m.DomainName, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.DomainName, new { @class = "form-control", @readonly = "true" })
                                    @Html.ValidationMessageFor(m => m.DomainName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Username, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control", @readonly = "true" })
                                    @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @readonly = "true" })
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @Html.HiddenFor(m => m.QueryType, new { id = "query-type" })

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button type="submit" id="submit-query-groups" class="btn btn-default" @(!isNotLDAPAuthenticated ? "readonly" : string.Empty)>Generate Izenda Tenant</button>
                                </div>
                            </div>
                }
            </section>
        </div>
        <div class="col-md-4">

        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
